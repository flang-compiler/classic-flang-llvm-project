name: LLVM Project Tests

on:
  workflow_call:
    inputs:
      build_target:
        required: true
        type: string

      projects:
        required: true
        type: string

concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  # If the group name here is the same as the group name in the workflow that includes
  # this one, then the action will try to wait on itself and get stuck.
  group: llvm-project-${{ github.workflow }}-${{ inputs.projects}}${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  lit-tests:
    name: Lit Tests
    runs-on: ${{ matrix.os }}
    env:
      install_prefix: /usr/local
    strategy:
      fail-fast: false
      matrix:
        target: [X86]
        os:
          - ubuntu-latest
          # Use a specific version of macOS to ensure the MacOSX.sdk workaround works.
          - macOS-10.15
    steps:
      - name: Setup Windows
        if: startsWith(matrix.os, 'windows')
        uses: llvm/actions/setup-windows@main
        with:
          arch: amd64
      - name: Install Ninja
        uses: llvm/actions/install-ninja@main
      - uses: actions/checkout@v1
        with:
          fetch-depth: 250
      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.os }}
      # Workaround for build faliure on MacOS X: llvm.org/PR46190, https://github.com/actions/virtual-environments/issues/2274
      - name: Override the MacOS.sdk symlink
        if: ${{ matrix.os == 'macOS-10.15'}}
        run: |
          sudo rm /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
          sudo rm -rf /Library/Developer/CommandLineTools/SDKs/MacOSX11.0.sdk
          sudo ln -sf MacOSX10.15.sdk /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
      - name: Test clang macOS
        if: ${{ matrix.os == 'macOS-10.15'}}
        run: |
          ./build-llvm-project.sh -t X86 -e "clang" -p /usr/local -s -n $(sysctl -n hw.logicalcpu) -i -v
          cd build
          make check-all
      - name: Test clang ubuntu
        if: ${{ matrix.os == 'ubuntu-latest'}}
        run: |
          ./build-llvm-project.sh -t X86 -e "${{ inputs.projects }}" -p /usr/local -s -n $(nproc) -i -v
          cd build
          make check-all
